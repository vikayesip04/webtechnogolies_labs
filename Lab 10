1. Terminal (Visual Studio Code)
npm init -y
npm install express pg dotenv

2. PostgreSQL
CREATE TABLE students (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    age INTEGER NOT NULL,
    major VARCHAR(100) NOT NULL
);

INSERT INTO students (name, age, major) VALUES
('John Doe', 20, 'Computer Science'),
('Jane Smith', 22, 'Mathematics'),
('Alice Johnson', 21, 'Physics'),
('Bob Brown', 23, 'Engineering');

3. Visual Studio Code
.env
DB_HOST=localhost
DB_PORT=5432
DB_USER=your_username
DB_PASSWORD=your_password
DB_NAME=university

db.js
const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
});

module.exports = pool;

server.js
const express = require('express');
const pool = require('./db');
require('dotenv').config();

const app = express();
app.use(express.json()); // Для парсингу JSON

// 1. Отримання всіх студентів
app.get('/api/students', async (req, res) => {
    try {
        const result = await pool.query('SELECT * FROM students');
        res.json(result.rows);
    } catch (err) {
        console.error(err.message);
        res.status(500).send("Error retrieving students");
    }
});

// 2. Отримання студента за ID
app.get('/api/students/:id', async (req, res) => {
    const { id } = req.params;
    try {
        const result = await pool.query('SELECT * FROM students WHERE id = $1', [id]);
        if (result.rows.length === 0) {
            return res.status(404).send('Student not found');
        }
        res.json(result.rows[0]);
    } catch (err) {
        console.error(err.message);
        res.status(500).send("Error retrieving student");
    }
});

// 3. Додавання нового студента
app.post('/api/students', async (req, res) => {
    const { name, age, major } = req.body;
    try {
        const result = await pool.query(
            'INSERT INTO students (name, age, major) VALUES ($1, $2, $3) RETURNING *',
            [name, age, major]
        );
        res.status(201).json(result.rows[0]);
    } catch (err) {
        console.error(err.message);
        res.status(500).send("Error adding student");
    }
});

// 4. Оновлення студента за ID
app.put('/api/students/:id', async (req, res) => {
    const { id } = req.params;
    const { name, age, major } = req.body;
    try {
        const result = await pool.query(
            'UPDATE students SET name = $1, age = $2, major = $3 WHERE id = $4 RETURNING *',
            [name, age, major, id]
        );
        if (result.rows.length === 0) {
            return res.status(404).send('Student not found');
        }
        res.json(result.rows[0]);
    } catch (err) {
        console.error(err.message);
        res.status(500).send("Error updating student");
    }
});

// 5. Видалення студента за ID
app.delete('/api/students/:id', async (req, res) => {
    const { id } = req.params;
    try {
        const result = await pool.query('DELETE FROM students WHERE id = $1 RETURNING *', [id]);
        if (result.rows.length === 0) {
            return res.status(404).send('Student not found');
        }
        res.status(204).send();
    } catch (err) {
        console.error(err.message);
        res.status(500).send("Error deleting student");
    }
});

// Запуск сервера
app.listen(3000, () => {
    console.log('Server is running on port 3000');
});

